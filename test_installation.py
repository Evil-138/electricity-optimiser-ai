#!/usr/bin/env python3
"""
Quick test script to verify the Energy Consumption Predictor installation.
"""

import sys
import os
sys.path.append('src')

def test_imports():
    """Test that all required modules can be imported."""
    print("üß™ Testing imports...")
    
    try:
        import pandas as pd
        print("‚úÖ pandas imported successfully")
        
        import numpy as np
        print("‚úÖ numpy imported successfully")
        
        import sklearn
        print("‚úÖ scikit-learn imported successfully")
        
        import xgboost
        print("‚úÖ xgboost imported successfully")
        
        import lightgbm
        print("‚úÖ lightgbm imported successfully")
        
        import matplotlib.pyplot as plt
        print("‚úÖ matplotlib imported successfully")
        
        import plotly
        print("‚úÖ plotly imported successfully")
        
        import flask
        print("‚úÖ flask imported successfully")
        
        from data_preprocessing import DataPreprocessor
        print("‚úÖ DataPreprocessor imported successfully")
        
        from feature_engineering import FeatureEngineer
        print("‚úÖ FeatureEngineer imported successfully")
        
        from modeling import EnergyPredictionPipeline
        print("‚úÖ EnergyPredictionPipeline imported successfully")
        
        from utils import load_config
        print("‚úÖ Utils imported successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Import error: {e}")
        return False

def test_data_files():
    """Test that data files exist and can be loaded."""
    print("\nüìä Testing data files...")
    
    try:
        electricity_path = 'data/raw/electricity_consumption.csv'
        weather_path = 'data/raw/weather_data.csv'
        
        if os.path.exists(electricity_path) and os.path.exists(weather_path):
            import pandas as pd
            elec_df = pd.read_csv(electricity_path)
            weather_df = pd.read_csv(weather_path)
            
            print(f"‚úÖ Electricity data: {elec_df.shape[0]} records")
            print(f"‚úÖ Weather data: {weather_df.shape[0]} records")
            return True
        else:
            print("‚ùå Sample data files not found")
            return False
            
    except Exception as e:
        print(f"‚ùå Data loading error: {e}")
        return False

def test_models():
    """Test that trained models exist."""
    print("\nü§ñ Testing trained models...")
    
    try:
        models_dir = 'models'
        if os.path.exists(models_dir):
            model_files = [f for f in os.listdir(models_dir) if f.endswith('.joblib')]
            if model_files:
                print(f"‚úÖ Found {len(model_files)} trained models:")
                for model_file in model_files:
                    print(f"   - {model_file}")
                return True
            else:
                print("‚ö†Ô∏è No trained model files found (.joblib)")
                return False
        else:
            print("‚ö†Ô∏è Models directory not found")
            return False
            
    except Exception as e:
        print(f"‚ùå Model check error: {e}")
        return False

def test_config():
    """Test that configuration loads correctly."""
    print("\n‚öôÔ∏è Testing configuration...")
    
    try:
        from utils import load_config
        config = load_config()
        
        if config and 'DATA_PATHS' in config:
            print("‚úÖ Configuration loaded successfully")
            print(f"   - Found {len(config)} configuration sections")
            return True
        else:
            print("‚ùå Configuration is empty or missing key sections")
            return False
            
    except Exception as e:
        print(f"‚ùå Configuration error: {e}")
        return False

def main():
    """Run all tests."""
    print("="*60)
    print("üß™ ENERGY CONSUMPTION PREDICTOR - INSTALLATION TEST")
    print("="*60)
    
    tests = [
        ("Imports", test_imports),
        ("Data Files", test_data_files),
        ("Trained Models", test_models),
        ("Configuration", test_config)
    ]
    
    results = []
    for test_name, test_func in tests:
        result = test_func()
        results.append((test_name, result))
    
    print("\n" + "="*60)
    print("üìã TEST RESULTS SUMMARY")
    print("="*60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:<20} {status}")
        if result:
            passed += 1
    
    print(f"\nOverall: {passed}/{total} tests passed")
    
    if passed == total:
        print("\nüéâ All tests passed! The system is ready for use.")
        print("\nüìö Next steps:")
        print("   1. Run training: python main.py train")
        print("   2. Start API: python main.py serve")
        print("   3. Open notebook: notebooks/Energy_Consumption_Predictor_Workflow.ipynb")
    else:
        print("\n‚ö†Ô∏è Some tests failed. Please check the errors above.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)